import argparse
import json

import kivy
kivy.require('2.3.0')

from kivy.metrics import dp
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.gridlayout import GridLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.scatter import Scatter
from kivy.uix.behaviors import ToggleButtonBehavior, ButtonBehavior
from kivy.graphics import Color, Rectangle, RoundedRectangle, Ellipse

from kivy.event import EventDispatcher

from kivy.graphics.svg import Svg
from kivy.properties import ObjectProperty, StringProperty, NumericProperty, ListProperty, ColorProperty, BooleanProperty

class SvgButtonWidget(ButtonBehavior, Scatter):

    filename = StringProperty()
    color = ColorProperty([0, 0, 0, 1])
    background_color = ColorProperty([0, 1, 0, 1])
    down_color = ColorProperty((0, 0, 0, .5))
    down_color_ins = None
    offset = ListProperty((0, 0))
    button_down = BooleanProperty(False)
    pressed = ListProperty(None, allownone=True)

    def __init__(self, **kwargs):
        super(SvgButtonWidget, self).__init__(**kwargs)
        self.register_event_type('on_click')
        with self.canvas:
            Color(rgba=self.background_color)
            sz = min(self.width, self.height)
            self.background = Ellipse(pos=(0,0), size=(sz, sz))
            self.svg = Svg(self.filename)
            if self.filename:
                self.svg.color = self.color if self.color else (0, 0, 0, 0)
                #self.height = self.svg.height
                #self.width = self.svg.width
            self.down_color_ins = Color(rgba=(0, 0, 0, 0))
            self.mask = Ellipse(pos=(0,0), size=(sz,sz))

    def on_click(self,_):
        print("CLIOCKKCY")
        return False

    def on_button_down(self, _, value):
        print("Heading DOWNNNNNN", self.button_down, value)
        self.down_color_ins.rgba = self.down_color if value else (0, 0, 0, 0)

    def on_touch_down(self, touch):
         print("x", touch.x, "y", touch.y, "pos", touch.pos, "my pos", self.pos, "parent", self.to_parent(*self.pos, relative=True))
         print("x", self.x, "y", self.y, "top", self.top, "right", self.right, "width", self.width, "height", self.height)
         print("window x, y", self.to_window(self.x, self.y), "window right, top", self.to_window(self.right, self.top))
         print("local", 
               self.to_local(*touch.pos, relative=True), 
               "widget", self.to_widget(*touch.pos, relative=True), 
               "parent", self.to_parent(*touch.pos, relative=True), 
               "window", self.to_window(*touch.pos))

         if self.collide_point(*touch.pos):
             print("Doing it")
             self.pressed = touch.pos
             self.button_down = True
             self.down_color_ins.rgba = self.down_color
             return True
         return super().on_touch_down(touch)

    def on_touch_up(self, touch):
        print("UUPPPP", self.button_down, self.pressed, self.collide_point(*touch.pos))
        collide = self.collide_point(*touch.pos)
        was_down = self.button_down
        was_pressed = self.pressed
        if was_down:
            self.button_down = False
        if was_pressed:
            self.pressed = None
        if collide and was_pressed:
            return self.on_click(self)
        
        return super().on_touch_up(touch)        

    def on_touch_move(self, touch):
        print("Move", self.button_down, self.pressed, self.collide_point(*touch.pos))
        collide = self.collide_point(*touch.pos)
        if not collide and self.button_down:
            self.button_down = False
            return True
        elif collide and not self.button_down and self.pressed:
            self.button_down = True
            return True
        return super().on_touch_move(touch)
        
    def on_scale(self, _, value):
        sz = min(self.height, self.width)
        self.mask.size = self.background.size = (sz / value, sz / value)
        self.mask.pos = self.background.pos = self.offset
        
    def on_color(self, _, value):
        if self.filename:
            self.svg.color = value

    def on_filename(self, _, value):
        self.svg.source = value
        self.svg.color = self.color if self.color else (0, 0, 0, 0)
    
class TranscribeEvents(EventDispatcher):
    def __init__(self, **kwargs):
        self.register_event_type('on_rowselect')
        super(TranscribeEvents, self).__init__(**kwargs)
    def row_selected(self, row):
        self.dispatch('on_rowselect', row)
    def on_rowselect(self, _):
        pass # nothing to do by default

events = TranscribeEvents()

class TimeEdit(BoxLayout):
    time_label = ObjectProperty()
    time_value = NumericProperty(None, allownone=True)
    step = NumericProperty()

    def decrease_time(self, _):
        time_value = self.time_value

        if time_value is None:
            time_value = 2.00
        else:
            time_value = round(time_value - .01, 2)

        # If we have a parent that has defined a validation function,
        # we'll call that function to see if the decrease is valid.  
        # If not, we'll assume the decrease is valid.
        val = getattr(self.parent, "validate_time", None) if self.parent else None
        if not callable(val) or val(self, time_value):
            self.time_value = time_value

    def increase_time(self, _):
        time_value = self.time_value

        ### Temp code until I have setting the row working    
        if time_value is None:
            time_value = 2.00
        else:
            time_value = round(time_value + .01, 2)
        ### End Temp

        # If we have a parent that has defined a validation function,
        # we'll call that function to see if the increase is valid.  
        # If not, we'll assume the increase is valid.
        val = getattr(self.parent, "validate_time", None) if self.parent else None
        if not callable(val) or val(self, time_value):
            self.time_value = time_value

class EditRow(GridLayout):
    start_time = ObjectProperty()
    end_time = ObjectProperty()

    def set_data(self, row):
        self.start_time.time_value = row.modified_start
        self.end_time.time_value = row.modified_end

    def validate_time(self, instance, time_value):
        ## Temp Code until I have setting the row working ##
        if (self.start_time.time_value is None or 
            self.end_time.time_value is None):
            self.start_time.time_value = 2.0
            self.end_time.time_value = 2.1
            return True
        ### End Temp
        is_start_time = instance == self.start_time

        if is_start_time:
            # Start time can't be less than 0 or more than the
            # end time.
            result = time_value >= 0 and time_value < self.end_time.time_value
        else:
            # End time can't be more than the total size of the
            # file (which I don't know yet) or less the start_value
            result = time_value > self.start_time.time_value                    
        return result
    
class TranscriptRow(ToggleButtonBehavior, GridLayout):
    row_id = StringProperty()
    speaker_name = StringProperty()
    transcription = StringProperty()
    original_start = NumericProperty()
    original_end = NumericProperty()
    modified_start = NumericProperty()
    modified_end = NumericProperty()

    background_color = ListProperty([1, 1, 1, 1])
    border_color = ListProperty([0, 1, .25, .25])

    def on_state(self, _, value):
        color = self.border_color if value == "down" else self.background_color
        # We're manually messing with the canvas instead of using pure kv
        # because we want the border to be rounded when highlighted but
        # rectangular otherwise.
        clazz = RoundedRectangle if value == "down" else Rectangle
        with self.canvas.before:
            Color(*color)
            clazz(pos=self.pos, size=self.size)
        if (value == "down"):
            events.row_selected(self)

class TranscriptScreen(Widget):
    transcript_grid = ObjectProperty()
    edit_row = ObjectProperty()

    def __init__(self, **kwargs):
        events.bind(on_rowselect=self.on_rowselect)
        super(TranscriptScreen, self).__init__(**kwargs)

    def on_rowselect(self, _, row):
        self.edit_row.set_data(row)

    def slider_change(self, *args):
        _, pos = args
        print(pos)

    def load_transcript(self, filename: str):
            
            with open(filename) as f:
                transcript = json.load(f)

            lines = transcript["transcription"] if transcript["transcription"] else []

            # For each line of transcription, add another line to
            # the scroll area
            self.transcript_grid.clear_widgets()
            even = True
            for line in lines:
                background_color = [1, 1, 1, 1] if even else [.95, .95, .95, 1]
                self.transcript_grid.add_widget(
                    TranscriptRow(
                        background_color = background_color,
                        row_id = str(line['id']),
                        speaker_name = line['speaker'],
                        transcription = line['text'],
                        original_start = line['original']['start'],
                        original_end = line['original']['end'],
                        modified_start = line['modified']['start'],
                        modified_end = line['modified']['end']
                    )
                )
                even = (not even)


class TranscriptApp(App):

    def build(self):
        args = get_arguments()
        screen = TranscriptScreen()
        # If we're given a json file as an argument, we'll
        # load it into the UI.
        if args.transcript_json:
            screen.load_transcript(args.transcript_json)

        return screen
    
def get_arguments():
    """
    Sets up the argument parser and grabs the passed in arguments.

    :return: The parsed arguments from the command line
    """
    parser = argparse.ArgumentParser(
        description="Creates a transcription of a Youtube video",
        usage="transcribe -v <video id> -t <huggingface auth token> [-o name for audio files]"
    )
    parser.add_argument(
        "-t", "--transcript", 
        help="The path to a saved transcript to load when the app loads",
        dest='transcript_json',
    )
    return parser.parse_args()

if __name__ == '__main__':
    TranscriptApp().run()